{"version":3,"sources":["components/Table/index.style.js","components/Table/index.js","App.js","reportWebVitals.js","index.js"],"names":["Pagination","Styled","table","thead","tbody","tr","th","td","div","PaginationIndex","PagincationButtonContainer","PaginationButton","RightIconSpan","span","LeftIconSpan","BackButtonIcon","i","NextButtonIcon","override","css","TableComponent","columns","data","fetchData","controlledPageCount","pageCount","loading","isPaginated","useState","defaultColumn","useMemo","useTable","initialState","pageIndex","pageSize","hiddenColumns","filter","column","show","map","id","manualPagination","manualSortBy","autoResetPage","useSortBy","useExpanded","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","nextPage","gotoPage","previousPage","setPageSize","setHiddenColumns","state","React","useEffect","color","size","className","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","Boolean","length","onClick","App","setPageCount","setData","fetchIdRef","useRef","setLoading","searchTerm","setSearchTerm","fetchAPIData","a","limit","skip","search","fetch","response","json","paging","pages","console","log","useCallback","fetchId","current","_handleSearch","_","debounce","maxWait","Header","accessor","Cell","cellInfo","moment","original","time","format","name","type","onChange","e","target","value","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f74a7346.chunk.js","sourcesContent":["import Styled from \"styled-components\"\nexport const Table = Styled.table`\nwidth : 100%;\npadding : 0 10px;\n`\n\nexport const TableHead = Styled.thead``\n\nexport const TableBody = Styled.tbody``\n\nexport const TableRow = Styled.tr``\n\nexport const TableHeader = Styled.th`\npadding : 40px 0 !important;\nword-wrap: break-word; \noverflow-wrap: break-word;\nfont-family: \"Proxima Nova\";\nfont-weight: 600;\nfont-stretch: normal;\nfont-style: normal;\nline-height: 1.33;\nletter-spacing: normal;\ncolor: #2f2d40;\n`\n\nexport const TableData = Styled.td`\ntext-align : center;\nfont-family: \"Proxima Nova\";\nfont-weight: normal;\nfont-stretch: normal;\nfont-style: normal;\nline-height: 1.33;\nletter-spacing: normal;\ncolor: #6d6c79;\n`\n\nexport const Styles = Styled.div`\n/* This is required to make the table full-width */\ndisplay: block;\n  max-width: 100%;\n\n  /* This will make the table scrollable when it gets too small */\n.tableWrap {\n    display: block;\n    max-width: 100%;\n    overflow-x: auto;\n    overflow-y: hidden;\n  }\n\n  table {\n    width: 100%;\n    border-spacing: 0;\n    \n\n    th {\n      border-bottom : 1px solid #af9efd;\n      vertical-align: initial;\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid rgba(219, 221, 227, 0.5);\n      /* border-right: 1px solid black; */\n\n       /* The secret sauce */\n      /* Each cell should grow equally */\n      width: 1%;\n /* But \"collapsed\" cells should be as small as possible */\n &.collapse {\n        width: 0.0000000001%;\n      }\n\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n\n  .pagination {\n    padding: 0.5rem;\n  }\n`\n\nexport const Pagination = Styled.div`\n display :flex;\n margin : 24px 0;  \n justify-content: flex-end;\n`\n\nexport const PaginationIndex = Styled.div`\ndisplay: flex;\nfont-family: \"Proxima Nova\";\nfont-weight: normal;\nfont-stretch: normal;\nfont-style: normal;\nline-height: 1.85;\nletter-spacing: normal;\ncolor: #9796a0;`\n\nexport const PagincationButtonContainer = Styled.div`\n display: flex;\n min-width: 130px;\n align-items: center;\n justify-content: space-around;\n margin: 0 40px 0 16px;\n`\n\nexport const PaginationButton = Styled.div`\n    width: 100%;\n    cursor: pointer;\n    display : flex;\n    max-width : 30px;\nheight: 18px;\nfont-family: \"Proxima Nova\";\nfont-weight: 600;\nfont-stretch: normal;\nfont-style: normal;\nline-height: 1.29;\nletter-spacing: normal;\ncolor: #000;\n`\n\nexport const RightIconSpan = Styled.span`\n margin-left : 12px;\n`\n\nexport const LeftIconSpan = Styled.span`\n  margin-right : 12px;\n`\n\nexport const BackButtonIcon = Styled.i`\nborder: solid 0.5px #000;\n  border-width: 0 2px 2px 0;\n  display: inline-block;\n  padding: 3px;\n  transform: rotate(135deg);\n`\n\nexport const NextButtonIcon = Styled.i`\nborder: solid 0.5px #000;\n  border-width: 0 2px 2px 0;\n  display: inline-block;\n  padding: 3px;\n  transform: rotate(-45deg);\n`\n","import React, { Fragment, useEffect, useMemo, useState } from \"react\";\nimport { useTable, usePagination, useExpanded, useSortBy } from \"react-table\";\nimport ClockLoader from \"react-spinners/ClockLoader\";\nimport { css } from \"@emotion/react\";\nimport {\n  Styles,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableHeader,\n  TableData,\n  Pagination,\n  PagincationButtonContainer,\n  PaginationButton,\n  PaginationIndex,\n  RightIconSpan,\n  LeftIconSpan,\n  NextButtonIcon,\n  BackButtonIcon,\n} from \"./index.style\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nconst TableComponent = ({\n  columns,\n  data,\n  fetchData,\n  pageCount: controlledPageCount,\n  loading,\n  isPaginated = true,\n  ...props\n}) => {\n  let [color, setColor] = useState(\"#ffffff\");\n  const defaultColumn = useMemo(\n    () => ({\n      // minWidth: 20,\n      // maxWidth: 115\n    }),\n    []\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    setHiddenColumns,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      initialState: {\n        pageIndex: 0,\n        pageSize: 15,\n        hiddenColumns: columns\n          .filter((column) => !column.show)\n          .map((column) => column.id),\n      },\n      manualPagination: true,\n      manualSortBy: true,\n      autoResetPage: false,\n      pageCount: controlledPageCount,\n    },\n    useSortBy,\n    useExpanded,\n    usePagination\n  );\n\n  React.useEffect(() => {\n    fetchData && fetchData({ pageIndex, pageSize });\n  }, [fetchData, pageIndex, pageSize]);\n\n  return (\n    <Fragment>\n      {loading ? (\n        <div>\n          {\" \"}\n          <ClockLoader\n            color={\"#000000\"}\n            loading={loading}\n            css={override}\n            size={150}\n          />\n        </div>\n      ) : (\n        <div className=\"flex flex-col w-full\">\n          <div className=\"-my-2 py-2 sm:-mx-6 sm:px-6 lg:-mx-8 lg:px-8\">\n            <div className=\"align-middle inline-block min-w-full shadow sm:rounded-lg border-b border-gray-200\"></div>\n            <table\n              className=\"min-w-full divide-y divide-gray-200\"\n              {...getTableProps()}\n            >\n              <thead>\n                {headerGroups.map((headerGroup) => (\n                  <tr {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map((column) => (\n                      <th\n                        className=\"px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\"\n                        {...column.getHeaderProps()}\n                      >\n                        {column.render(\"Header\")}\n                      </th>\n                    ))}\n                  </tr>\n                ))}\n              </thead>\n\n              <tbody\n                className=\"bg-white divide-y divide-gray-200\"\n                {...getTableBodyProps()}\n              >\n                {page.map((row, i) => {\n                  prepareRow(row);\n                  return (\n                    <tr {...row.getRowProps()}>\n                      {row.cells.map((cell) => {\n                        return (\n                          <td\n                            className=\"px-6 py-4 whitespace-no-wrap text-sm leading-5 font-medium text-gray-900\"\n                            {...cell.getCellProps()}\n                          >\n                            {cell.render(\"Cell\")}\n                          </td>\n                        );\n                      })}\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            {Boolean(isPaginated) && (\n              <Pagination>\n                <PaginationIndex>\n                  page {pageIndex + 1} of {pageOptions.length}\n                </PaginationIndex>{\" \"}\n                <PagincationButtonContainer>\n                  {canPreviousPage ? (\n                    <PaginationButton onClick={() => previousPage()}>\n                      <LeftIconSpan>\n                        <BackButtonIcon />\n                      </LeftIconSpan>\n                      Back\n                    </PaginationButton>\n                  ) : null}\n                  {canNextPage ? (\n                    <PaginationButton onClick={() => nextPage()}>\n                      Next{\" \"}\n                      <RightIconSpan>\n                        <NextButtonIcon />\n                      </RightIconSpan>\n                    </PaginationButton>\n                  ) : null}\n                </PagincationButtonContainer>\n              </Pagination>\n            )}\n          </div>\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nexport default TableComponent;\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  Fragment,\n  useMemo,\n  useRef,\n} from \"react\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport Table from \"./components/Table\";\nimport \"./App.css\";\n\nfunction App() {\n  const [pageCount, setPageCount] = useState(0);\n  const [data, setData] = useState([]);\n  const fetchIdRef = useRef(0);\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const fetchAPIData = async ({ limit, skip, search }) => {\n    try {\n      setLoading(true);\n      const response = await fetch(\n        `/companies?limit=${limit}&skip=${skip}&search=${search}`\n      );\n      const data = await response.json();\n\n      setData(data.data);\n\n      setPageCount(data.paging.pages);\n      setLoading(false);\n    } catch (e) {\n      console.log(\"Error while fetching\", e);\n      // setLoading(false)\n    }\n  };\n\n  const fetchData = useCallback(\n    ({ pageSize, pageIndex }) => {\n      // console.log(\"fetchData is being called\")\n      // This will get called when the table needs new data\n      // You could fetch your data from literally anywhere,\n      // even a server. But for this example, we'll just fake it.\n      // Give this fetch an ID\n      const fetchId = ++fetchIdRef.current;\n      setLoading(true);\n      if (fetchId === fetchIdRef.current) {\n        fetchAPIData({\n          limit: pageSize,\n          skip: pageSize * pageIndex,\n          search: searchTerm,\n        });\n      }\n    },\n    [searchTerm]\n  );\n\n  const _handleSearch = _.debounce(\n    (search) => {\n      setSearchTerm(search);\n    },\n    1500,\n    {\n      maxWait: 1500,\n    }\n  );\n\n  const columns = useMemo(() => [\n    { Header: \"Price\", accessor: \"price\", show: true },\n    { Header: \"Shares\", accessor: \"shares\", show: true },\n    { Header: \"Ticker\", accessor: \"ticker\", show: true },\n    { Header: \"Ticket\", accessor: \"ticket\", show: true },\n    {\n      Header: \"Time\",\n      accessor: \"time\",\n      Cell: (cellInfo) => {\n        return (\n          <Fragment>\n            {moment(cellInfo.row.original.time).format(\"Do MMM YYYY\")}\n          </Fragment>\n        );\n      },\n      show: true,\n    },\n  ]);\n\n  return (\n    <div className=\"container mx-auto flex flex-col\">\n      <div className=\"mt-3\">\n        <input\n          id=\"searchTerm\"\n          name=\"searchTerm\"\n          type=\"text\"\n          onChange={(e) => _handleSearch(e.target.value)}\n          placeholder=\"Search By Ticket\"\n          className=\"appearance-none block w-1/4 float-right px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n        />\n      </div>\n\n      <div className=\"flex justify-center mt-8\">\n        <Table\n          pageCount={pageCount}\n          fetchData={fetchData}\n          columns={columns}\n          loading={loading}\n          data={data}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}